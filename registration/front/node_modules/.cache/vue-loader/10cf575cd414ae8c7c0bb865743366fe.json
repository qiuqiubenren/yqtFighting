{"remainingRequest":"D:\\graduateSys\\registration\\front\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\graduateSys\\registration\\front\\src\\views\\demo\\antv2\\index.vue?vue&type=style&index=0&id=10df5f54&lang=less&scoped=true","dependencies":[{"path":"D:\\graduateSys\\registration\\front\\src\\views\\demo\\antv2\\index.vue","mtime":1743403543355},{"path":"D:\\graduateSys\\registration\\front\\node_modules\\css-loader\\dist\\cjs.js","mtime":1739857216827},{"path":"D:\\graduateSys\\registration\\front\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1739857212421},{"path":"D:\\graduateSys\\registration\\front\\node_modules\\postcss-loader\\src\\index.js","mtime":1739857212963},{"path":"D:\\graduateSys\\registration\\front\\node_modules\\less-loader\\dist\\cjs.js","mtime":1739857239884},{"path":"D:\\graduateSys\\registration\\front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1739857231742},{"path":"D:\\graduateSys\\registration\\front\\node_modules\\vue-loader\\lib\\index.js","mtime":1739857212415}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKDQojY29udGFpbmVyIHsNCiAgICB3aWR0aDogMTAwJTsNCiAgICBoZWlnaHQ6IDcwMHB4Ow0KICAgIG1hcmdpbi10b3A6IDIwcHg7DQp9DQoNCi5hbnR2VGl0bGUgew0KICAgIGZvbnQtc2l6ZTogMjBweDsNCiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7DQogICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7DQogICAgZGlzcGxheTogZmxleDsNCg0KICAgIC5hbnR2U2Vjb25kVGl0bGUgew0KICAgICAgICBjb2xvcjogI2ZmOTkwMDsNCiAgICAgICAgZm9udC1zaXplOiAyMnB4Ow0KICAgIH0NCn0NCg=="},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2IA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/views/demo/antv2","sourcesContent":["<template>\r\n<div>\r\n    <div id=\"container\"></div>\r\n</div>\r\n</template>\r\n\r\n<script>\r\nimport {\r\n    Pie,\r\n    measureTextWidth\r\n} from '@antv/g2plot';\r\nexport default {\r\n    name: \"test-page\",\r\n    components: {},\r\n    props: {},\r\n    data() {\r\n        return {\r\n            depCountData: [{\r\n                    title: '零食类',\r\n                    value: 27\r\n                },\r\n                {\r\n                    title: '冷冻类',\r\n                    value: 25\r\n                },\r\n                {\r\n                    title: '烟酒类',\r\n                    value: 18\r\n                },\r\n                {\r\n                    title: '生鲜类',\r\n                    value: 15\r\n                },\r\n                {\r\n                    title: '散装类',\r\n                    value: 10\r\n                },\r\n                {\r\n                    title: '水果类',\r\n                    value: 5\r\n                }\r\n            ],\r\n            piePlot: {},\r\n        }\r\n    },\r\n    methods: {\r\n        init() {\r\n            this.initAntvFx();\r\n        },\r\n        renderStatistic(containerWidth, text, style) {\r\n            const {\r\n                width: textWidth,\r\n                height: textHeight\r\n            } = measureTextWidth(text, style);\r\n            const R = containerWidth / 2;\r\n            let scale = 1;\r\n            if (containerWidth < textWidth) {\r\n                scale = Math.min(Math.sqrt(Math.abs(Math.pow(R, 2) / (Math.pow(textWidth / 2, 2) + Math.pow(textHeight, 2)))), 1);\r\n            }\r\n            const textStyleStr = `width:${containerWidth}px;`;\r\n            return `<div style=\"${textStyleStr};font-size:${scale}em;line-height:${scale < 1 ? 1 : 'inherit'};\">${text}</div>`;\r\n        },\r\n        initAntvFx() {\r\n            var that = this;\r\n            var data = this.depCountData;\r\n            this.piePlot = new Pie('container', {\r\n                appendPadding: 10,\r\n                data,\r\n                angleField: 'value',\r\n                colorField: 'title',\r\n                radius: 1,\r\n                innerRadius: 0.64,\r\n                meta: {\r\n                    value: {\r\n                        formatter: (v) => `${v} `,\r\n                    },\r\n                },\r\n                label: {\r\n                    type: 'inner',\r\n                    offset: '-50%',\r\n                    style: {\r\n                        textAlign: 'center',\r\n                    },\r\n                    autoRotate: false,\r\n                    content: '{value}',\r\n                },\r\n                statistic: {\r\n                    title: {\r\n                        offsetY: -4,\r\n                        customHtml: (container, view, datum) => {\r\n                            const {\r\n                                width,\r\n                                height\r\n                            } = container.getBoundingClientRect();\r\n                            const d = Math.sqrt(Math.pow(width / 2, 2) + Math.pow(height / 2, 2));\r\n                            const text = datum ? datum.title : '系统访问分析';\r\n                            return that.renderStatistic(d, text, {\r\n                                fontSize: 28\r\n                            });\r\n                        },\r\n                    },\r\n                    content: {\r\n                        offsetY: 4,\r\n                        style: {\r\n                            fontSize: '32px',\r\n                        },\r\n                        customHtml: (container, view, datum, data) => {\r\n                            const {\r\n                                width\r\n                            } = container.getBoundingClientRect();\r\n                            const text = datum ? ` ${datum.value}人` : ` ${data.reduce((r, d) => r + d.value, 0)}人`;\r\n                            return that.renderStatistic(width, text, {\r\n                                fontSize: 32\r\n                            });\r\n                        },\r\n                    },\r\n                },\r\n                // 添加 中心统计文本 交互\r\n                interactions: [{\r\n                    type: 'element-selected'\r\n                }, {\r\n                    type: 'element-active'\r\n                }, {\r\n                    type: 'pie-statistic-active'\r\n                }],\r\n            });\r\n            this.piePlot.render();\r\n            this.piePlot.on('element:click', (args) => {\r\n                that.getPieUserItemFx(args.data.data.title);\r\n            });\r\n        },\r\n    },\r\n    mounted() {\r\n        this.init();\r\n    },\r\n};\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n#container {\r\n    width: 100%;\r\n    height: 700px;\r\n    margin-top: 20px;\r\n}\r\n\r\n.antvTitle {\r\n    font-size: 20px;\r\n    text-align: center;\r\n    justify-content: center;\r\n    display: flex;\r\n\r\n    .antvSecondTitle {\r\n        color: #ff9900;\r\n        font-size: 22px;\r\n    }\r\n}\r\n</style>\r\n"]}]}